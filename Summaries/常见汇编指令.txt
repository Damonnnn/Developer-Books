;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                        data process
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
opcode<cc><S> Rd, Rn, <op1>
其中op1有如下格式：
-------------------------------------------------------------------
    Syntax              Mode
-------------------------------------------------------------------
1   #<value>            Immediate
2   Rm                  Register
3   Rm, LSL #<value>    Logical shift left by immediate
4   Rm, LSL             Rs Logical shift left by register
5   Rm, LSR #<value>    Logical shift right by immediate
6   Rm, LSR Rs          Logical shift right by register
7   Rm, ASR #<value>    Arithmetic shift right by immediate
8   Rm, ASR Rs          Arithmetic shift right by register
9   Rm, ROR #<value>    Rotate right by immediate
10  Rm, ROR Rs          Rotate right by register
11  Rm, RRX             Rotate right with extend
-------------------------------------------------------------------

MOV R0, #0                           ; Move zero to R0
ADD R3, R3, #1                       ; Add one to the value of register 3
CMP R7, #1000                        ; Compare value of R7 with 1000
BIC R9, R8, #0xFF00                  ; Clear bits 8-15 of R8 and store in R9
                                     
MOV R2, R0                           ; Move the value of R0 to R2
ADD R4, R3, R2                       ; Add R2 to R3, store result in R4
CMP R7, R8                           ; Compare the value of R7 and R8

MOV R2, R0, LSL #2                   ; Shift R0 left by 2, write to R2, (R2=R0x4)
ADD R9, R5, R5, LSL #3               ; R9 = R5 + R5 x 8 or R9 = R5 x 9
RSB R9, R5, R5, LSL #3               ; R9 = R5 x 8 - R5 or R9 = R5 x 7
SUB R10, R9, R8, LSR #4              ; R10 = R9 - R8 / 16
MOV R12, R4, ROR R3                  ; R12 = R4 rotated right by value of R3


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                        memory access
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
opcode<cc><B><H><T> Rd, <op2>
其中op2有如下格式,其中中括号[]表示取地址所在的值。
-------------------------------------------------------------------
    Syntax                       Mode
-------------------------------------------------------------------
1   [Rn, #±<value>]              Immediate offset
2   [Rn, Rm]                     Register offset
3   [Rn, Rm, <shift> #<value>]   Scaled register offset
4   [Rn, #±<value>]!             Immediate pre-indexed
5   [Rn, Rm]!                    Register pre-indexed
6   [Rn, Rm, <shift> #<value>]!  Scaled register pre-indexed
7   [Rn], #±<value>              Immediate post-indexed
8   [Rn], Rm                     Register post-indexed
9   [Rn], Rm, <shift> #<value>   Scaled register post-indexed
-------------------------------------------------------------------
LDR R1, [R0]                     ; Load R1 from the address in R0
LDR R8, [R3, #4]                 ; Load R8 from the address in R3 + 4
LDR R12, [R13, #-4]              ; Load R12 from R13 - 4
STR R2, [R1, #0x100]             ; Store R2 to the address in R1 + 0x100
LDRB R5, [R9]                    ; Load byte into R5 from R9 ; (zero top 3 bytes)
LDRB R3, [R8, #3]                ; Load byte to R3 from R8 + 3 ; (zero top 3 bytes)
STRB R4, [R10, #0x200]           ; Store byte from R4 to R10 + 0x200
LDR R11, [R1, R2]                ; Load R11 from the address in R1 + R2
STRB R10, [R7, -R4]              ; Store byte from R10 to addr in R7 - R4
LDR R11, [R3, R5, LSL #2]        ; Load R11 from R3 + (R5 x 4)
LDR R1, [R0, #4]!                ; Load R1 from R0 + 4, then R0 = R0 + 4
STRB R7, [R6, #-1]!              ; Store byte from R7 to R6 - 1, ; then R6 = R6 - 1
LDR R3, [R9], #4                 ; Load R3 from R9, then R9 = R9 + 4
STR R2, [R5], #8                 ; Store R2 to R5, then R5 = R5 + 8
LDR R0, [PC, #40]                ; Load R0 from PC + 0x40 (= address of the LDR instruction + 8 + 0x40)
LDR R0, [R1], R2                 ; Load R0 from R1, then R1 = R1 + R2
LDRH R1, [R0]                    ; Load halfword to R1 from R0 ; (zero top 2 bytes)
LDRH R8, [R3, #2]                ; Load halfword into R8 from R3 + 2
LDRH R12, [R13, #-6]             ; Load halfword into R12 from R13 - 6
STRH R2, [R1, #0x80]             ; Store halfword from R2 to R1 + 0x80
LDRSH R5, [R9]                   ; Load signed halfword to R5 from R9
LDRSB R3, [R8, #3]               ; Load signed byte to R3 from R8 + 3
LDRSB R4, [R10, #0xC1]           ; Load signed byte to R4 from R10 + 0xC1
LDRH R11, [R1, R2]               ; Load halfword into R11 from address in R1 + R2
STRH R10, [R7, -R4]              ; Store halfword from R10 to R7 - R4
LDRSH R1, [R0, #2]!              ; Load signed halfword R1 from R0 + 2, ; then R0 = R0 + 2
LDRSB R7, [R6, #-1]!             ; Load signed byte to R7 from R6 - 1,; then R6 = R6 - 1
LDRH R3, [R9], #2                ; Load halfword to R3 from R9, ; then R9 = R9 + 2
STRH R2, [R5], #8                ; Store halfword from R2 to R5, ; then R5 = R5 + 8


STMFD R13!, {R0 - R12, LR}
LDMFD R13!, {R0 - R12, PC}
LDMIA R0, {R5 - R8}
STMDA R1!, {R2, R5, R7 - R9, R11}













